from aiogram import types, Router, F
from aiogram.filters import Command
from app.services.deepseek_service import get_deepseek_response
from app.config import get_api_key

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã


@router.message(F.new_chat_members)
async def greet_new_member(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ.
    """
    for user in message.new_chat_members:
        await message.reply(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —á–∞—Ç! "
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å—Ç–µ –º–µ–Ω—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–≥–æ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö


@router.message(F.chat.type.in_(["group", "supergroup"]))
async def answer_tagged(message: types.Message, bot):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –±–æ—Ç –±—ã–ª —è–≤–Ω–æ —É–ø–æ–º—è–Ω—É—Ç —á–µ—Ä–µ–∑ @username –∏–ª–∏ text_mention.
    """
    bot_user = await bot.me()
    bot_username = f"@{bot_user.username}"

    print(f"Received message in group: {message.text}")
    print(f"Bot username: {bot_username}")
    print(f"Message entities: {message.entities}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    mentioned = False
    if message.entities:
        for e in message.entities:
            print(f"Checking entity: {e.type}")
            if e.type == "mention":
                mention_text = message.text[e.offset:e.offset + e.length]
                print(f"Found mention: {mention_text}")
                if mention_text.lower() == bot_username.lower():
                    mentioned = True
                    print("Bot was mentioned!")
                    break
            elif e.type == "text_mention" and e.user and e.user.id == bot_user.id:
                mentioned = True
                print("Bot was text_mentioned!")
                break

    if not mentioned:
        print("Bot was not mentioned, ignoring message")
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –±—ã–ª —É–ø–æ–º—è–Ω—É—Ç

    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥ –±–æ—Ç–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
    question = message.text
    for entity in message.entities:
        if entity.type == "mention":
            mention_text = message.text[entity.offset:entity.offset + entity.length]
            if mention_text.lower() == bot_username.lower():
                question = question.replace(mention_text, "").strip()
        elif entity.type == "text_mention" and entity.user and entity.user.id == bot_user.id:
            question = question.replace(
                message.text[entity.offset:entity.offset + entity.length], "").strip()

    try:
        # –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è)
        api_key = get_api_key("ProAI_Test_20241219")
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
        response = get_deepseek_response(
            provider_id="ProAI_Test_20241219",
            assistant_name="FinanceBot",
            user_message=question,
            prompt="–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ò –æ—Ç–≤–µ—á–∞–π –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."
        )
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if "error" in response:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        else:
            await message.reply(response["message"])
    except Exception as e:
        print(f"Error in group handler: {str(e)}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –≤ –≥—Ä—É–ø–ø–µ


@router.message(Command("help"))
async def help_command(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.
    """
    help_text = (
        "ü§ñ –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –û—Ç–º–µ—Ç—å—Ç–µ –º–µ–Ω—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º\n"
        "2. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
    )
    await message.reply(help_text)
